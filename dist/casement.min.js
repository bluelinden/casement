/*! For license information please see casement.min.js.LICENSE.txt */
!function(e,s){"object"==typeof exports&&"object"==typeof module?module.exports=s():"function"==typeof define&&define.amd?define([],s):"object"==typeof exports?exports.casement=s():e.casement=s()}(self,(()=>(()=>{"use strict";var e={d:(s,a)=>{for(var t in a)e.o(a,t)&&!e.o(s,t)&&Object.defineProperty(s,t,{enumerable:!0,get:a[t]})},o:(e,s)=>Object.prototype.hasOwnProperty.call(e,s),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},s={};e.r(s),e.d(s,{Inside:()=>t,Outside:()=>i});class a{constructor(){this.name="default",this.allowedDomain=""}}class t extends a{loggy(...e){this.debug&&console.info(...e)}init(){window.addEventListener("message",(e=>{this.handleIncoming(e)})),this.loggy("Casement: Sending ready message to outside window and listening for responses."),window.parent.postMessage({type:`casement-${this.name}-inside-ready`})}send(e,s){this.allowSend?(s||(s="casement-message",this.loggy('Casement: No actionName was provided. Using default actionName "casement-message".')),window.parent.postMessage({type:"casement-inside-message",message:e,actionName:s},this.allowedDomain),this.loggy("Casement: Sent message to outside window.")):console.warn("Casement Error: Cannot send message. The iFrame has not yet loaded, or has not yet confirmed that it is ready.")}on(e,s){this.onMessage||(this.onMessage=[]),this.onMessage.push({name:e,callback:s}),this.loggy(`Casement: Registered handler for message "${e}".`)}request(e,s){if(this.allowSend)return new Promise((a=>{const t=Math.random().toString(36).substring(2,15)+Math.random().toString(36).substring(2,15);window.parent.postMessage({type:`casement-${this.name}-inside-request`,transmissionID:t,message:e,actionName:s},this.allowedDomain),this.loggy(`Casement: Sent request to outside window, ID ${t}.`);const i=s=>{s.origin!==this.allowedDomain&&"*"!==this.allowedDomain||(this.loggy(`Casement: Received response from outside window, ID ${s.data.transmissionID}.`),s.data.type===`casement-${this.name}-inside-response`&&s.data.transmissionID===e.transmissionID&&(window.removeEventListener("message",i),a(s.data.message),this.loggy(`Casement: Accepted response from outside window, ID ${s.data.transmissionID}.`)))};window.addEventListener("message",i),this.loggy(`Casement: Listening for response from outside window, ID ${t}.`)}));console.warn("Casement Error: Cannot send message. The outside window has not yet confirmed that it is ready. Make sure the outside window is properly able to send messages to this window.")}handleIncoming(e){if(this.loggy("Casement: Incoming parser called."),e.origin===this.allowedDomain||"*"===this.allowedDomain)switch(e.data.type){case`casement-${this.name}-outside-ready`:this.loggy("Casement: Received ready message from outside window."),this.allowSend=!0,this.onReady&&this.onReady();break;case`casement-${this.name}-outside-message`&&e.data.actionName:this.loggy("Casement: Received categorized message from outside window."),this.onMessage?this.onMessage.forEach((s=>{s.name===e.data.actionName?(s.callback(e.data.message),this.loggy(`Casement: Accepted categorized message from outside window, actionName ${e.data.actionName}.`)):"*"===s.name&&(s.callback(e.data.message,e.data.actionName),this.loggy(`Casement: Accepted categorized message from outside window, actionName ${e.data.actionName}.`))})):console.warn("Casement Error: Received a message from outside but no handler was set. Make sure to use the inside.on() method to set a handler for this request.");break;case`casement-${this.name}-outside-request`:this.loggy(`Casement: Received request from outside window, ID ${e.data.transmissionID}.`),this.onMessage?window.parent.postMessage({type:`casement-${this.name}-inside-response`,message:Promise.all(this.onMessage.map((s=>s.name===e.data.actionName?(this.loggy(`Casement: Accepted request from outside window, actionName ${e.data.actionName}.`),s.callback(e.data.message)):"*"===s.name?s.callback(e.data.message,e.data.actionName):void 0)))},this.allowedDomain):console.warn("Casement Error: Received a request from outside but no handler was set. Make sure to use the inside.on() method to set a handler for this request.");break;case`casement-${this.name}-outside-ready`:this.allowSend=!0,this.onReady&&this.onReady()}}kill(e=!1){e&&this.onKill&&this.onKill(),this.loggy("Casement: Sending kill message to outside window."),window.parent.postMessage({type:`casement-${this.name}-inside-kill-ready`})}constructor(e){super(),this.allowSend=!1,this.debug=!1,e.debug&&(this.debug=e.debug),this.loggy("Casement: Initializing inside window."),this.name=e.name,this.allowedDomain=e.allowedDomain,e.onReady&&(this.onReady=e.onReady),this.init()}}class i extends a{loggy(...e){this.debug&&console.info(...e)}init(){window.addEventListener("message",(e=>{this.handleIncoming(e)})),this.loggy("Casement: Listening for ready message from inside window.")}send(e,s){this.allowSend?(s||(s="casement-message",this.loggy('Casement: No actionName was provided. Using default actionName "casement-message".')),this.iFrame.contentWindow.postMessage({type:"casement-outside-message",message:e,actionName:s},this.allowedDomain),this.loggy("Casement: Sent message to inside window.")):console.warn("Casement Error: Cannot send message. The iFrame has not yet loaded, or has not yet confirmed that it is ready.")}on(e,s){this.onMessage||(this.onMessage=[]),this.onMessage.push({name:e,callback:s}),this.loggy(`Casement: Registered handler for message "${e}".`)}request(e,s){if(this.allowSend)return new Promise((a=>{const t=Math.random().toString(36).substring(2,15)+Math.random().toString(36).substring(2,15);this.iFrame.contentWindow.postMessage({type:`casement-${this.name}-outside-request`,transmissionID:t,message:e,actionName:s},this.allowedDomain),this.loggy(`Casement: Sent request to inside window, ID ${t}.`);const i=s=>{s.origin!==this.allowedDomain&&"*"!==this.allowedDomain||(this.loggy(`Casement: Received response from inside window, ID ${t}.`),s.data.type===`casement-${this.name}-inside-response`&&s.data.transmissionID===e.transmissionID&&(window.removeEventListener("message",i),a(s.data.message),this.loggy(`Casement: Accepted response from inside window, ID ${t}.`)))};window.addEventListener("message",i),this.loggy(`Casement: Listening for response from inside window, ID ${t}.`)}));console.warn("Casement Error: Cannot send message. The iFrame has not yet loaded, or has not yet confirmed that it is ready.")}handleIncoming(e){if(this.loggy("Casement: Incoming parser called."),e.origin===this.allowedDomain||"*"===this.allowedDomain)switch(e.data.type){case`casement-${this.name}-inside-ready`:this.iFrame.contentWindow.postMessage({type:`casement-${this.name}-outside-ready`},this.allowedDomain),this.loggy("Casement: Received ready message from inside window."),this.allowSend=!0,this.onReady&&this.onReady();break;case`casement-${this.name}-inside-message`&&e.data.actionName:this.loggy("Casement: Recieved categorized message from inside window."),this.onMessage?this.onMessage.forEach((s=>{s.name===e.data.actionName?(s.callback(e.data.message),this.loggy(`Casement: Accepted categorized message from inside window, actionName ${e.data.actionName}.`)):"*"===s.name&&(s.callback(e.data.message,e.data.actionName),this.loggy(`Casement: Accepted categorized message from inside window, actionName ${e.data.actionName}.`))})):console.warn("Casement Error: Received a message from inside but no handler was set. Make sure to use the outside.on() method to set a handler for this message type.");break;case`casement-${this.name}-inside-request`:this.loggy(`Casement: Received request from inside window, ID ${e.data.transmissionID}.`),this.onMessage?this.iFrame.contentWindow.postMessage({type:`casement-${this.name}-outside-response`,message:Promise.all(this.onMessage.map((s=>s.name===e.data.actionName?(this.loggy(`Casement: Accepted request from inside window, ID ${e.data.transmissionID}.`),s.callback(e.data.message)):"*"===s.name?s.callback(e.data.message,e.data.actionName):void 0)))},this.allowedDomain):console.warn('Casement Error: Received a request from inside but no handler was set. Remember to pass a handler function to the "onMessage" option when creating a new casement.Outside instance.')}}kill(e=!1){this.onKill&&this.onKill(),this.loggy("Casement: Killing iFrame."),this.iFrame.contentWindow.postMessage({type:"casement-outside-kill"},this.allowedDomain);const s=e=>{e.origin!==this.allowedDomain&&"*"!==this.allowedDomain||e.data.type===`casement-inside-${this.name}-kill-ready`&&(this.iFrame.remove(),this.loggy("Casement: iFrame killed."),window.removeEventListener("message",s))};e?e&&(this.iFrame.remove(),this.loggy("Casement: iFrame killed.")):(window.addEventListener("message",s),this.loggy("Casement: Waiting for iFrame kill confirmation."))}constructor(e){super(),this.allowSend=!1,this.debug=!1,e.debug&&(this.debug=e.debug),this.loggy("Casement: Outside instance created."),this.name=e.name,this.pageUrl=e.pageUrl||"/",this.allowedDomain=this.pageUrl.split("/").slice(0,3).join("/"),e.onReady&&(this.onReady=e.onReady),e.container?(this.container=e.container,this.iFrame=document.createElement("iframe"),this.iFrame.src=this.pageUrl,this.container.appendChild(this.iFrame)):e.iFrame&&(this.iFrame=e.iFrame),this.init()}}return s})()));